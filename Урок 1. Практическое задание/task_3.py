"""
Задание 3.
Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему
Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

dict_1 = {
    'компания 1': 50000,
    'компания 2': 100000,
    'компания 3': 700000,
    'компания 4': 10000,
    'компания 5': 200000,
    'компания 6': 500000
}

#1
#сложность O(N^2)


def alg_1(repository):
    for i in range(3):
        max_key = 0
        for key, value in repository.items():
            if value == min(repository.values()):
                max_key = key
        del repository[max_key]
    return repository


print(alg_1(dict_1))

#2
# сложность O(N)


def alg_2(repository):
    max_dict = {}
    my_list = dict(repository)
    for i in range(3):
        func_max = max(my_list.items(), key=lambda tup: tup[1])
        del my_list[func_max[0]]
        max_dict[func_max[0]] = func_max[1]
    return max_dict


print(alg_2(dict_1))
""""
Самый лучший вариант решения будет под номером 2, так как имеет 
меньше сложность в сравнении с 1 вариантом. В 1 варианте 2 цикла, что усложняет ход решения. Использование lambda функции во 2 варианте, позволило упростить ход решения.
"""
